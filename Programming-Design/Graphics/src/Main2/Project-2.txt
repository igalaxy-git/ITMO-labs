// Класс самой игры, реализованный на одномерном массиве
public class Dice {
    public static int indexOfNull = 15; // индекс нулевого элемента
    private static int[] dice = new int[16] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0}; // массив с числами от 0 до 15

    // Метод тасует все элементы, кроме последнего
    public static void shuffle() {
        for (int i = 0; i < 15; i++) {
            // Случайное значение от i до 14
            int j = (int) (Math.random() * 15);
            // Поменять местами элементы i и j (метод swap(i, j))
        }
    }

    // Метод меняет местами элементы массива dice с переданными индексами
    public static void swap(int a, int b) {
        int temp = dice[a];
        dice[a] = dice[b];
        dice[b] = temp;
    }

    // Метод проверяет является ли текущая комбинация выигрышной
    public static boolean win() {
        // Цикл от 0 до 15 по массиву dice с проверкой, что каждый элемент равен i + 1
            // Иначе вернуть false
        // Вернуть true
    }

    // Метод проверяет соседствует ли элемент с нулевым
    // Если да, то меняет местами элементы, меняет индекс нуля и возвращает true
    // Если нет, возвращает false
    public static boolean change(int value) {
        // Цикл по массиву dice, чтобы найти индекс элемента value
        // Если индекс + 1 == indexOfNull или индекс - 1 == indexOfNull или индекс + 4 == indexOfNull или индекс - 4 == indexOfNull
            // Поменять элементы местами (метод swap) и обновить indexOfNull
            return true;
        return false;
    }
}

// Класс фрейма
public class Frame extends JFrame {
    public Frame() {
        // Задать имя "Пятнашки"
        // Задать размеры фрейма (setSize)
        // Центрировать фрейм (setLocationRelativeTo(null))
        // Запретить менять размер фрейма (setResizable(false))

        // Добавить в фрейм обработку событий клавиатуры (addKeyListener)
        /*
            int index = Dice.getIndexOfNull();
            Если пользователь нажал кнопку "влево"
                Проверить находится ли нулевой элемент в первых трех столбцах (indexOfNull % 4 != 3)
                    Поменять местами нулевой элемент и элемент справа от него (метод Dice.swap(index, index + 1))
                    Dice.setIndexOfNull(index + 1)
            Если пользователь нажал кнопку "вверх"
                Проверить находится ли нулевой элемент в первых трех строчках (indexOfNull < 12)
                    Поменять местами нулевой элемент и элемент снизу от него (метод Dice.swap(index, index + 4))
                    Dice.setIndexOfNull(index + 4)
            Если пользователь нажал кнопку "вправо"
                Проверить находится ли нулевой элемент в последних трех столбцах (indexOfNull % 4 != 0)
                    Поменять местами нулевой элемент и элемент слева от него (метод Dice.swap(index, index - 1))
                    Dice.setIndexOfNull(index - 1)
            Если пользователь нажал кнопку "вниз"
                Проверить находится ли нулевой элемент в последних трех строчках (indexOfNull > 3)
                    Поменять местами нулевой элемент и элемент сверху от него (метод Dice.swap(index, index - 4))
                    Dice.setIndexOfNull(index - 4)
            Обновить кнопки (метод Panel.update)
        */

        // Создать панель и добавить в фрейм
        Panel panel = new Panel();
        add(panel);

        // Создать меню и добавить в фрейм
        Menu menu = new Menu();
        setJMenuBar(menu);
    }
}

// Класс панели с кнопками
public class Panel extends JPanel{
    private JButton[] buttons = new JButton[16]; // массив кнопок для отображения чисел

    public Panel(){
        // Задать диспетчер компоновки GridLayout
        setLayout(new GridLayout(4, 4));
        // Создать кнопки и добавить на панель (метод init)
    }

    // Метод создания кнопок
    private void init(){
        // Цикл от 0 до 16 с созданием кнопок и добавлением на панель
            // Создать кнопки в массиве buttons с именами, соответсвующими элементам массива dice
            buttons[i] = new JButton(String.valueOf(Dice.dice[i]));
            // Обработка событий, нажатие кнопки
            /*
                Получить имя кнопки
                Поменять местами элементы, если кнопка соседствует с нулевой (метод Dice.change)
            */
            // Добавить кнопку на панель
            panel.add(buttons[i]);
    }

    // Метод обновляет названия кнопок и их видимость
    public void update() {
        // Цикл по массиву buttons
            // Обновление названий (buttons[i].setText(String.valueOf(dice[i])))
            buttons[i].setVisible(true);
        // После цикла кнопку с нулем скрыть
        buttons[indexOfNull].setVisible(false);
        // Проверить комбинацию на победу (метод Dice.win)
        // Если комбинация выигрышная, то вывести диалоговое окно и начать новую игру
    }
}

// Класс меню
public class Menu extends JMenu {
    public Menu {
        // Создать меню File
        JMenu jmFile = new JMenu("File"); //Файл
        jmFile.setMnemonic(KeyEvent.VK_F); // Задать мнемонику

        JMenuItem jmiNew = new JMenuItem("New"); // Новая игра
        jmiNew.setMnemonic(KeyEvent.VK_N); // Задать мнемонику
        jmiNew.setAccelerator(KeyStroke.getKeyStroke("ctrl N")); // Задать акселератор
        jmiNew.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                // Обновить массив dice
                // Заново перетасовать (метод Dice.shuffle)
                // Обновить кнопки (метод Panel.update)
            }
        });
        jmFile.add(jmiNew);

        JMenuItem jmiExit = new JMenuItem("Exit"); // Выход
        jmiExit.setAccelerator(KeyStroke.getKeyStroke("ctrl E")); // Задать акселератор
        jmiExit.setMnemonic(KeyEvent.VK_E); // Задать мнемонику
        jmiExit.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        jmFile.add(jmiExit);

        add(jmFile);

        // Создать меню Help
        JMenu jmHelp = new JMenu("Help"); // Справка
        jmHelp.setMnemonic(KeyEvent.VK_H); // Задать мнемонику

        JMenuItem jmiAbout = new JMenuItem("About"); // О программе
        jmiAbout.setMnemonic(KeyEvent.VK_A); // Задать мнемонику
        jmiAbout.setAccelerator(KeyStroke.getKeyStroke("ctrl A")); // Задать акселератор
        jmiAbout.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                // Открыть диалоговое окно с текстом
                JOptionPane.showMessageDialog(null, "Игнатова Галина, P3165, 2023", "About", 1);
            }
        });
        jmHelp.add(jmiAbout);

        add(jmHelp);
    }
}


public class Main {
    public static void main(String[] args) {
        // Перемешать кости, то есть случайным образом поменять местами элементы массива dice (метод Dice.shuffle)
        // Создать новый Frame
        // Завершить работу, если пользователь закрывает приложение (setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE))
        // Сделать фрейм видимым (setVisible(true))
    }
}