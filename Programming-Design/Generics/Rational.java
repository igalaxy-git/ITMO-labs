// класс рациональных чисел
class Rational implements Comparable<Rational> {
    private int n; // числитель
    private int q; // знаменатель

    // конструктор из числителя и знаменателя
    public Rational(int a, int b) {
        n = a;
        q = b;
        // если q == 0, выбросить Arithmetic Exception
        if (q == 0)
            throw new ArithmeticException();
        // если числитель равен нулю, то знаменатель 1
        if (n == 0)
            this.q = 1;
        // иначе, сократить дробь (метод reduce)
        else
            // сокращение дроби
            // если знаменатель меньше нуля, то домножить знаменатель и числитель на -1
            if (q < 0){
                n = n * -1;
                q = q * -1;
            }
            // найти наименьший общий делитель (метод NOD)
            int g = NOD(Math.abs(n), q);
            // разделить числитель и знаменатель на НОД
            n = n / g;
            q = q / g;
    }

    // поиск наибольшего общего делителя
    private static int NOD(int a, int b){
        int t;
        do {
            t = a % b;
            a = b;
            b = t;
        } while (t != 0);
        return a;
    }

    // сравнение с другим экземпляром класса
    public int compareTo(Rational x){
        // если a < b, вернуть значение меньше нуля
        // если a = b, вернуть 0
        // если a > b, вернуть значение больше нуля
        // значит вернуть результат вычитания этих двух дробей
        return (n*x.q)-(x.n*q);
    }

    // преобразование в строку
    public String toString(){
        // если числитель равен нулю, вернуть "0"
        if (n == 0)
            return "0";
        // если знаменатель равен единице, вернуть числитель
        if (q == 1)
            return String.valueOf(n);
        // если дробь сложная (Math.abs(n/q) >= 1), то вернуть результат деления + " " + остаток от деления + "/" + знаменатель
        if (Math.abs(n/q) >= 1)
            return n / q + " " + Math.abs(n % q) + "/" + q;
        // вернуть числитель + "/" + знаменатель
        return n + "/" + q;
    }
}
